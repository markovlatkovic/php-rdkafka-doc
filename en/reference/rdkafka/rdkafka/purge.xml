<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="rdkafka.purge" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>RdKafka::purge</refname>
  <refpurpose>Purge messages handled by the producer</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>integer</type><methodname>RdKafka::purge</methodname>
   <methodparam><type>integer</type><parameter>purge_flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   Purges messages handled by the producer.
   The application will need to call rd_kafka_poll() or rd_kafka_flush()
   afterwards to serve the delivery report callbacks of the purged messages.
   Messages purged from internal queues fail with the delivery report
   error code set to <constant>RD_KAFKA_RESP_ERR__PURGE_QUEUE</constant>, while purged messages that
   are in-flight to or from the broker will fail with the error code set to
   <constant>RD_KAFKA_RESP_ERR__PURGE_INFLIGHT</constant>.
  </para>
  <note>
   <para>
    Purging messages that are in-flight to or from the broker
    will ignore any sub-sequent acknowledgement for these messages
    received from the broker, effectively making it impossible
    for the application to know if the messages were successfully
    produced or not. This may result in duplicate messages if the
    application retries these messages at a later time.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>purge_flags</parameter> (<type>integer</type>)</term>
    <listitem>
     <para>
      The following flags are available:
      <constant>RD_KAFKA_PURGE_F_QUEUE</constant> (purge internal queue),
      <constant>RD_KAFKA_PURGE_F_INFLIGHT</constant> (purge messages in-flight to or from the broker),
      <constant>RD_KAFKA_PURGE_F_NON_BLOCKING</constant> (don't wait)
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns <constant>RD_KAFKA_RESP_ERR_NO_ERROR</constant> on success,
   <constant>RD_KAFKA_RESP_ERR__INVALID_ARG</constant> for invalid purge flags,
   <constant>RD_KAFKA_RESP_ERR__NOT_IMPLEMENTED</constant> if called on a non-producer instance
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
