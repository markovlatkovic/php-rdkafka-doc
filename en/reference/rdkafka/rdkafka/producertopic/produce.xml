<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="rdkafka-producertopic.produce" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>RdKafka\ProducerTopic::produce</refname>
  <refpurpose>Produce and send a single message</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>RdKafka\ProducerTopic::produce</methodname>
   <methodparam><type>integer</type><parameter>partition</parameter></methodparam>
   <methodparam><type>integer</type><parameter>msgflags</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>payload</parameter> <initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>key</parameter> <initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>opaque</parameter> <initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Produce and send a single message to broker.
  </para>
  <para>
   This is async and non-blocking.
  </para>
  <note>
   <para>
    Since producing is asynchronous, you should call <link linkend="rdkafka.flush">flush</link> before
    you destroy the producer. Otherwise, any outstanding messages will be
    silently discarded.
   </para>
  </note>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>partition</parameter></term>
    <listitem>
     <para>
      Can be either <constant>RD_KAFKA_PARTITION_UA</constant> (unassigned) for automatic partitioning using the topic's partitioner function (see <function>RdKafka\TopicConf::setPartitioner</function>, or a fixed partition (0..N).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>msgflags</parameter></term>
    <listitem>
     <para>
       Must be either 0 or <constant>RD_KAFKA_MSG_F_BLOCK</constant>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>payload</parameter></term>
    <listitem>
     <para>
      Payload string
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>key</parameter></term>
    <listitem>
     <para>
      Optional message key, if non-&null; it will be passed to the topic partitioner as well as be sent with the message to the broker and passed on to the consumer.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>opaque</parameter></term>
    <listitem>
     <para>
      An optional application-provided per-message opaque string that will be provided in the message's delivary callback (see <function>RdKafka\Conf::setDrMsgCb</function>). (Since PECL rdkafka 5.0.0 with librdkafka &gt;= 1.0.0.)
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns no value.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <simplelist>
   &rdkafka.error.exception;
  </simplelist>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.0.0</entry>
       <entry>
        Added optional <parameter>opaque</parameter> parameter.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>RdKafka\ProducerTopic::produce</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$message = [
    'type' => 'account-created',
    'id' => $accountId,
    'date' => date(DATE_W3C),
];

$payload = json_encode($message);

$topic->produce(RD_KAFKA_PARTITION_UA, 0, $payload, $accountId);
?>
]]>
   </programlisting>
  </example>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
